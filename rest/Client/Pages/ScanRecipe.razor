@page "/scan"

@using Microsoft.Extensions.Logging
@using System.Net.Http.Headers
@using System.Web
@using rest.Client.Models
@inject ILogger<ScanRecipe> Logger
@inject HttpClient Client

<h2>Scan new Recipe</h2>

<div class="row">
    <div class="col-sm-4"><label for="image">Scan Image: </label></div>
    <div class="col-sm-8"><InputFile id="image" OnChange="@LoadFile" accept="image/*" capture /></div>
</div>

<div class="row">
    <div class="col-sm-4"><label for="image">Choose Image: </label></div>
    <div class="col-sm-8"><InputFile id="image" OnChange="@LoadFile" accept="image/*" /></div>
</div>

@if(currentlyUploading)
{
    <div class="spinner-border" role="status" />
    <span class="sr-only">Uploading...</span>
}
@if(!currentlyUploading && file != null)
{
    <a class="btn btn-primary" onclick="@HandleValidSubmitGoogle">Upload to Goole</a>
    <a class="btn btn-primary" onclick="@HandleValidSubmit">Upload to Azure</a>
}

@if(!manualCorrectionModel.IsEmpty)
{
    <div class="row">
        <ManualCorrection manualCorrection=@manualCorrectionModel></ManualCorrection>
    </div>
}

@code {
    private IBrowserFile? file;
    private ManualCorrectionModel manualCorrectionModel = new();
    private bool currentlyUploading = false;
    private void LoadFile(InputFileChangeEventArgs e)
    {
        file = e.File;        
    }

    private async Task HandleValidSubmit()
    {
        if (file == null) throw new FileNotFoundException();
        currentlyUploading = true;
        try
        {
            using var content = new MultipartFormDataContent();
            var fileContent = new StreamContent(file.OpenReadStream(10_000_000));
            fileContent.Headers.ContentType = new MediaTypeHeaderValue(file.ContentType);
            content.Add(content: fileContent,name: "\"files\"", fileName: file.Name);
            var response = await Client.PostAsync("/cookbook/scan/", content);
            if(response.StatusCode == System.Net.HttpStatusCode.OK)
            {
                var result = await response.Content.ReadFromJsonAsync<ManualCorrectionModel>();            
                manualCorrectionModel = result;            
            }            
        }
        finally
        {
            currentlyUploading = false;
        }        
    }

    private async Task HandleValidSubmitGoogle()
    {
        if (file == null) throw new FileNotFoundException();
        currentlyUploading = true;
        try
        {
            using var content = new MultipartFormDataContent();
            var fileContent = new StreamContent(file.OpenReadStream(10_000_000));
            fileContent.Headers.ContentType = new MediaTypeHeaderValue(file.ContentType);
            content.Add(content: fileContent,name: "\"files\"", fileName: file.Name);
            var response = await Client.PostAsync("/cookbook/scan2/", content);
            if(response.StatusCode == System.Net.HttpStatusCode.OK)
            {
                var result = await response.Content.ReadFromJsonAsync<ManualCorrectionModel>();            
                manualCorrectionModel = result;            
            }            
        }
        finally
        {
            currentlyUploading = false;
        }        
    }


}